#!/usr/bin/env bash

# Many things sourced from these places
# - https://github.com/mrzool/bash-sensible/blob/master/sensible.bash
# - http://maketecheasier.com/8-useful-and-interesting-bash-prompts/2009/09/04
# - http://bashrcgenerator.com/
# - http://stackoverflow.com/a/13003854/170413
# - https://github.com/jondavidjohn/dotfiles
# - https://gist.github.com/insin/1425703

# If not running interactively, don't do anything and return early
[[ $- == *i* ]] || return

############
# COLOR LS #
############

LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'
export LS_COLORS

###############
# ENVIRONMENT #
###############

# Get homebrew in path quickly if on a mac and it exists
if [ -d /opt/homebrew/bin/ ]; then
  export PATH="/opt/homebrew/bin:$PATH"
fi

# Use vim as my editor for things like vipw or crontab -e
# Most stuff looks at $EDITOR but ancient stuff might look at $VISUAL
export EDITOR=vim
export VISUAL=vim

# Get coloured man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
export PATH=$PATH:~/bin
export PATH=$PATH:~/.local/bin

# I never care about mail on unix machines these days
shopt -u mailwarn
unset MAILCHECK

# Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
export PYTHONIOENCODING='UTF-8'

# Prefer British English and use UTF-8.
if [[ "$OSTYPE" == "darwin"* ]]; then
  export LANG='en_GB.UTF-8'
  export LC_ALL='en_GB.UTF-8'
fi
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  export LANG='en_GB.utf8'
  export LC_ALL='en_GB.utf8'
fi

# Don’t clear the screen after quitting a manual page.
export MANPAGER='less -X'

###########
# ALIASES #
###########

# Cls for clear screen
alias cls="clear"

# Always run bc with -l so division works like you would expected.
alias bc="bc -l"

# Print mount output in a sane way
alias cmount="mount | column -t"

# Alias anti-typo
alias sl=ls # No steam locomotive please !

# Dont bother with less if the output is shorter than a single screen
alias less="less -FX"

# Shorter things
alias gits="git status"
alias gitd="git diff"
alias gitco="git checkout"
alias gitc="git commit -v"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

alias ll="ls -laG"

# Preserve environment when using sudo
# alias sudo="sudo -E"
#
# Coloured cat output.
alias ccat='pygmentize -g -O linenos=1'

#############
# FUNCTIONS #
#############

# Akamai curl with all the debug options specific to Akamai turned on
akacurl() {
  curl -I -H "Pragma: akamai-x-cache-on, akamai-x-cache-remote-on, akamai-x-check-cacheable, akamai-x-get-cache-key, akamai-x-get-extracted-values, akamai-x-get-nonces, akamai-x-get-ssl-client-session-id, akamai-x-get-true-cache-key, akamai-x-serial-no" "$*"
}

# Lets you create tarballs of things with tgz $DIRNAME
tgz() {
  tar -zcvf "$1.tar.gz" "$1"
}

# Generic extraction function for all kinds of archived things.
function extract() {
  if [ -f $1 ]; then
    case $1 in
    *.tar.bz2) tar xvjf "$1" ;;
    *.tar.gz) tar xvzf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.rar) unrar x "$1" ;;
    *.gz) gunzip "$1"1 ;;
    *.tar) tar xvf "$1" ;;
    *.tbz2) tar xvjf "$1" ;;
    *.tgz) tar xvzf "$1" ;;
    *.zip) unzip "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) echo "'$1' unknown file extension, sorry !" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# Sets the window terminal title to something. For example :-
# title foo.
# Is somewhat terminal dependant so might not work on everything.
title() {
  case "$TERM" in
  *term* | rxvt)
    echo -en "\e]0;$*\a"
    ;;
  *) ;;
  esac
}

########
# MISC #
########

# Update window size after every command
shopt -s checkwinsize

# Automatically trim long paths in the prompt (requires Bash 4.x)
PROMPT_DIRTRIM=4

################
# AUTOCOMPLETE #
################

# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"

# Display matches for ambiguous patterns at first tab press
bind "set show-all-if-ambiguous on"

###########
# HISTORY #
###########

# Append to history instead of overwrite
# Makes working in multiple terminals much more sane
shopt -s histappend

# Compact multiline commands as they go in history
shopt -s cmdhist

# Store more history in memory / file
# Sizes are in lines.
HISTSIZE=10000
HISTFILESIZE=100000

# If you run a command over and over, only put it in history once
HISTCONTROL="erasedups:ignoreboth"

##############
# NAVIGATION #
##############

# Prepend cd to directory names automatically
# (but only look in the current directory for directories to cd to)
shopt -s autocd
CDPATH="."

# Correct obvious typos
shopt -s dirspell
# Correct obvious typos when using cd
shopt -s cdspell

##########
# PROMPT #
##########

# Colours
# Regular
txtblk="$(tput setaf 0 2>/dev/null || echo '\e[0;30m')" # Black
txtred="$(tput setaf 1 2>/dev/null || echo '\e[0;31m')" # Red
txtgrn="$(tput setaf 2 2>/dev/null || echo '\e[0;32m')" # Green
txtylw="$(tput setaf 3 2>/dev/null || echo '\e[0;33m')" # Yellow
txtblu="$(tput setaf 4 2>/dev/null || echo '\e[0;34m')" # Blue
txtpur="$(tput setaf 5 2>/dev/null || echo '\e[0;35m')" # Purple
txtcyn="$(tput setaf 6 2>/dev/null || echo '\e[0;36m')" # Cyan
txtwht="$(tput setaf 7 2>/dev/null || echo '\e[0;37m')" # White

# Bold
bldblk="$(tput setaf 0 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;30m')" # Black
bldred="$(tput setaf 1 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;31m')" # Red
bldgrn="$(tput setaf 2 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;32m')" # Green
bldylw="$(tput setaf 3 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;33m')" # Yellow
bldblu="$(tput setaf 4 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;34m')" # Blue
bldpur="$(tput setaf 5 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;35m')" # Purple
bldcyn="$(tput setaf 6 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;36m')" # Cyan
bldwht="$(tput setaf 7 2>/dev/null)$(tput bold 2>/dev/null || echo '\e[1;37m')" # White

# Underline
undblk="$(tput setaf 0 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;30m')" # Black
undred="$(tput setaf 1 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;31m')" # Red
undgrn="$(tput setaf 2 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;32m')" # Green
undylw="$(tput setaf 3 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;33m')" # Yellow
undblu="$(tput setaf 4 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;34m')" # Blue
undpur="$(tput setaf 5 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;35m')" # Purple
undcyn="$(tput setaf 6 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;36m')" # Cyan
undwht="$(tput setaf 7 2>/dev/null)$(tput smul 2>/dev/null || echo '\e[4;37m')" # White

# Background
bakblk="$(tput setab 0 2>/dev/null || echo '\e[40m')" # Black
bakred="$(tput setab 1 2>/dev/null || echo '\e[41m')" # Red
bakgrn="$(tput setab 2 2>/dev/null || echo '\e[42m')" # Green
bakylw="$(tput setab 3 2>/dev/null || echo '\e[43m')" # Yellow
bakblu="$(tput setab 4 2>/dev/null || echo '\e[44m')" # Blue
bakpur="$(tput setab 5 2>/dev/null || echo '\e[45m')" # Purple
bakcyn="$(tput setab 6 2>/dev/null || echo '\e[46m')" # Cyan
bakwht="$(tput setab 7 2>/dev/null || echo '\e[47m')" # White

# Reset
txtrst="$(tput sgr 0 2>/dev/null || echo '\e[0m')" # Text Reset

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch >/dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2>/dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="${txtgrn}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${txtylw}"
  else
    state="${txtred}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  # WARNING: On some versions of git, this needs to be
  # branch_pattern="^# On branch ([^${IFS}]*)"

  branch_pattern="^On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  BRANCH="${state}(${branch})${remote}${txtrst} "
}

# Determine active Python virtualenv details.
function set_virtualenv() {
  if test -z "$VIRTUAL_ENV"; then
    PYTHON_VIRTUALENV="None"
  else
    PYTHON_VIRTUALENV=$(basename "$VIRTUAL_ENV")
  fi
}

function _prompt_command() {
  # Get rcode first to prevent it from being overwritten
  RCODE=$?

  # Write history to disk on command execution. Makes multiterminals sane.
  history -a

  # If we are in Warp, ignore all that stuff and just have a simple prompt.
  if [ "${WARP_HONOR_PS1}" = "0" ] && [ "${UID}" != "0" ]; then
    export PS1="\n"
    return 0
  fi
  if [ "${WARP_HONOR_PS1}" = "0" ] && [ "${UID}" = "0" ]; then
    export PS1="# "
    return 0
  fi

  # If the last command ran okay (return code 0)
  if [ "${RCODE}" -eq 0 ]; then
    RCODEDISPLAY="\[$txtgrn\][${RCODE}]\[$txtrst\]"
  # And if it didnt (return code > 0)
  else
    RCODEDISPLAY="\[$txtred\][${RCODE}]\[$txtrst\]"
  fi

  # If we are root
  if [ $UID -eq 0 ]; then
    COLOR="\[$txtred\]"
  # And if we are not
  else
    COLOR="\[$txtgrn\]"
  fi

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the BRANCH variable.
  if is_git_repository; then
    set_git_branch
  else
    BRANCH=''
  fi

  # First line with username@host and path
  PS1="\n${COLOR}[\u@\h] \[$txtblu\]\w \[$txtrst\]\n"

  # Second line is git/venv status
  if [ x"$BRANCH" != "x" ]; then
    PS1+="\[$txtcyn\][Git: $BRANCH\[$txtcyn\]]\[$txtrst\]"
  fi
  if [ x"$PYTHON_VIRTUALENV" != "x" ]; then
    PS1+="\[$txtcyn\][Venv: \[$txtgrn\]${PYTHON_VIRTUALENV} \[$txtcyn\]]\n"
  fi

  # Third line is the return code of the previous command and the time.
  PS1+="${RCODEDISPLAY} \t \\] $(tput sgr0)\n"

  # Final line is the prompt
  if [ $UID -ne 0 ]; then
    PS1+="\[$txtgrn\]$ \[$txtrst\]"
  else
    PS1+="\[$txtred\]$ \[$txtrst\]"
  fi
}

# Export prompt stuff
export PS1
export PROMPT_COMMAND=_prompt_command

# Run this or the first displayed prompt wont look correct.
_prompt_command

##################
## Autocomplete ##
##################

# Source the default bash completions.

if [ -f /etc/profile.d/bash_completion.sh ]; then
  source /etc/profile.d/bash_completion.sh
fi

# Source our custom bash completions
if [ -d ~/.bash_completion.d/ ]; then
  for FILE in ~/.bash_completion.d/*; do
    source "$FILE"
  done
fi

##############
## Color LS ##
##############

# Not sure why this needs to go at the bottom, but this is often overwritten on
# Debian based systems if it is not here.
alias ls='ls --color=auto'

# SSH Agent
SSH_ENV="$HOME/.ssh/agent-environment"

function start_agent {
  echo "Initialising new SSH agent..."
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' >"${SSH_ENV}"
  echo succeeded
  chmod 600 "${SSH_ENV}"
  . "${SSH_ENV}" >/dev/null
  /usr/bin/ssh-add
}

# Source SSH settings, if applicable
# if [ -f "${SSH_ENV}" ]; then
#     . "${SSH_ENV}" > /dev/null
#     #ps ${SSH_AGENT_PID} doesn't work under cywgin
#     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#         echo Would start agent.
#         # start_agent;
#     }
# else
#     echo Would start agent.
#     # start_agent;
# fi

# Source rust environment if it exists
if [ -f "${HOME}/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH=$BUN_INSTALL/bin:$PATH

# texlive
if [ -d /usr/local/texlive/ ]; then
  if [ ! -d /usr/local/texlive/2024/bin/x86_64-linux/ ]; then
    echo "ERROR: Found /usr/local/texlive but not /usr/local/texlive/2024/bin/x86_64-linux/"
    echo "Fix PATH in dotfile for new texlive version ?"
  else
    export PATH=/usr/local/texlive/2024/bin/x86_64-linux/:$PATH
  fi
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# Docker experimental features.
export DOCKER_CLI_EXPERIMENTAL=enabled

# Code Insiders Alias for ci
alias codei="code-insiders --enable-features=UseOzonePlatform --ozone-platform=wayland"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH=$BUN_INSTALL/bin:$PATH

# Poke Warp
# printf '\eP$f{"hook": "SourcedRcFileForWarp", "value": { "shell": "bash"}}\x9c'

### Make CTRL-L clear scrollback
bind -x '"\C-l": clear;'

### Bindings for fd + fzf

if command -v fdfind &>/dev/null; then
  export FDFIND="fdfind"
else
  export FDFIND="fd"
fi

cd_to_dir() {
  local selected_dir
  if [ "$FDFIND" == 'fdfind' ]; then
    selected_dir=$(fdfind -t d . "$1" | fzf +m --height 50% --preview 'tree -C {}')
  fi
  if [ "$FDFIND" == 'fd' ]; then
    selected_dir=$(fd -t d . "$1" | fzf +m --height 50% --preview 'tree -C {}')
  fi
  if [[ -n "$selected_dir" ]]; then
    # Change to the selected directory
    cd "$selected_dir" || return 1
  fi
}

alias cdd='cd_to_dir .'

# Bat is batcat
alias bat="batcat"

if [ -f "$(which fzf)" ]; then
  eval "$(fzf --bash)"
fi

export PATH="$PATH:$HOME/.modular/bin"

# Check if neomutt is installed, and if so alias mutt to it.
if command -v neomutt &>/dev/null; then
  alias mutt=neomutt
fi

# Check if nvim is instaled, and if so alias vi and vim to it.
if command -v nvim &>/dev/null; then
  alias vi=nvim
  alias vim=nvim
fi

# Check if lsd is installed, and if so alias ls to it.
# and if so alias realls to ls
if command -v lsd &>/dev/null; then
  alias ls=lsd
  alias tree="lsd --tree"
  alias realls=ls
  alias realtree=tree
fi

if command -v batcat &>/dev/null; then
  alias bat=batcat
fi

if ! command -v cursor &>/dev/null && [ -x /opt/cursor.appimage ]; then
  alias cursor=/opt/cursor.appimage
fi

# Toolcheck. Checks if the tools needed are installed.

function toolcheck {
  local TOOLS="cheat fdfind grip delta dust fzf jq hyperfine bat uv rg pandoc lsd batcat"
  local NOTFOUND=0
  for tool in $TOOLS; do
    if ! command -v $tool &>/dev/null; then
      echo "$tool not installed."
      NOTFOUND=1
    fi
  done
  if [ $NOTFOUND == 0 ]; then
    echo "All tools installed."
    return 0
  else
    return 1
  fi
}

### Add the go bin directory if it exists, so things installed with go install work

if [ -d ~/go/bin/ ]; then
  PATH=${PATH}:~/go/bin
fi

### Add a alias for lazydocker to lzd, but only if lazydocker is installed in the path

if command -v lazydocker &>/dev/null; then
  alias lzd=lazydocker
fi

### Source Local Config
if [ -f ~/.bashrc.local ]; then
  source ~/.bashrc.local
fi

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"
